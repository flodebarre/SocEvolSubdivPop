
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Script to estimate the probability that two individuals have the same parent,
> # when there is some distribution of number of propagules produced
> # (instead of the same number for all)
> 
> estimateQ <- function(demesize = 4, avePropNb = 200, nrep = 10^6){
+   # Parameters
+   # demesize  Number of individuals per deme
+   # avePropNb expected number of propagules per individual
+   # nrep  number of replicates
+     
+   oneIteration <- function(samplingfunction, alsoTwo = TRUE){
+     # Draw numbers of propagules
+     # Choose the law
+     PropNb <- samplingfunction()
+     # Sample the next generation
+     NextGen <- sample(1:demesize, demesize, replace = TRUE, prob = PropNb)
+     # Compute proba same parent
+     sameParent <- 0
+     for(i in 1:(demesize-1)){
+       for(j in (i+1):demesize){
+         if(NextGen[i] == NextGen[j]) sameParent <- sameParent + 1
+         }
+     }
+     sP2 <- NA
+     if(alsoTwo){
+     # Draw two adults of the next generation
+     NextGen2 <- sample(1:demesize, 2, replace = TRUE, prob = PropNb)
+     sP2 <- (1*(NextGen[1]==NextGen[2]))
+     }
+   #  freqSameParent <- sameParent / (demesize* (demesize-1)/2)
+     return(c(sameParent, sP2))
+   }
+   
+   # oneIterationTwoIndiv <- function(samplingfunction){
+   #   # Draw numbers of propagules
+   #   # Choose the law
+   #   PropNb <- samplingfunction()
+   #   # Draw two adults of the next generation
+   #   NextGen <- sample(1:demesize, 2, replace = TRUE, prob = PropNb)
+   #   #  freqSameParent <- sameParent / (demesize* (demesize-1)/2)
+   #   return(1*(NextGen[1]==NextGen[2]))
+   # }
+   
+   
+   PoissonSample <- function(){
+     rpois(demesize, avePropNb)
+   }
+   
+   BinomialSample <- function(){
+     rbinom(demesize, avePropNb*2, 1/2)  
+   }
+   
+   BinomialSampleUneq <- function(){
+     rbinom(demesize, avePropNb*1/0.1, 0.1)  
+   }
+   
+   NoVarSample <- function(){
+     rep(avePropNb, demesize)  
+   }
+   
+   vPois <- replicate(nrep, oneIteration(PoissonSample))
+   mP1 <- mean(vPois[1,]/(demesize*(demesize-1)/2))
+   mP2 <- mean(vPois[2,])
+   
+   vCst <- replicate(nrep, oneIteration(NoVarSample))
+   mC1 <- mean(vCst[1,]/(demesize*(demesize-1)/2))
+   mC2 <- mean(vCst[2,])
+   
+   #  vPois2 <- replicate(nrep, oneIterationTwoIndiv(PoissonSample))
+ #  mP2 <- mean(vPois2)
+   
+   facPois <- 1 - avePropNb*demesize*exp( - avePropNb*demesize) - exp(-avePropNb* demesize)
+ 
+   return(c(mP1 = mP1, mP2 = mP2, mC1 = mC1, mC2 = mC2, facPois = facPois))
+ }
> 
> dsizes <- seq(2, 10, by = 1)
> nr <- 10^7
> savetab <- as.data.frame(matrix(0, nrow = length(dsizes), ncol = 5))
> names(savetab) <- c("mP1", "mP2", "mC1", "mC2", "facPois")
> 
> for(i in seq_along(dsizes)){
+   print(paste0(i, "/", length(dsizes)))
+   savetab[i, ] <- estimateQ(demesize = dsizes[i], nrep = nr)
+ }
[1] "1/9"
[1] "2/9"
[1] "3/9"
[1] "4/9"
[1] "5/9"
[1] "6/9"
[1] "7/9"
[1] "8/9"
[1] "9/9"
> 
> write.csv(cbind(dsizes, savetab), file = "save_probasameparent.csv", row.names = FALSE)
> 
> m <- read.csv("save_probasameparent.csv")
> m
  dsizes       mP1       mP2       mC1       mC2 facPois
1      2 0.5011675 0.5011675 0.5000825 0.5000825       1
2      3 0.3345372 0.3344992 0.3333715 0.3331776       1
3      4 0.2509890 0.2511803 0.2499375 0.2498646       1
4      5 0.2007725 0.2009093 0.1999658 0.2001789       1
5      6 0.1673843 0.1673028 0.1666758 0.1667812       1
6      7 0.1434800 0.1434093 0.1428351 0.1428189       1
7      8 0.1255506 0.1257073 0.1249625 0.1250267       1
8      9 0.1116109 0.1116458 0.1111084 0.1109598       1
9     10 0.1004647 0.1004452 0.1000125 0.0999314       1
> 
> #vBinom <- replicate(nrep, oneIteration(BinomialSample))
> #mean(vBinom)
> #hist(vBinom)
> 
> #vBinomU <- replicate(nrep, oneIteration(BinomialSampleUneq))
> #mean(vBinomU)
> #hist(vBinomU)
> 
> 
> 
> proc.time()
    user   system  elapsed 
4277.168    5.532 4290.944 
